type User implements Node {
    id: ID!
    name: String!
    username: String!
    email: String
    phone: String
    website: String
    createAt: String!
    updateAt: String!
    todo: [Todo] @goField(forceResolver: true)
}

type UserMutationResponse implements MutationResponse {
    code: Int
    success: Boolean
    message: String
    data: User
}

input CreateUserInput {
    name: String!
    username: String!
    email: String!
    phone: String!
    website: String
}

input UpdateUserInput {
    name: String
    username: String
    email: String
    phone: String
    website: String
}

extend type Query {
    user(id: ID!): User
    users(after: Cursor, first: Int, before: Cursor, last: Int, where: UserWhereInput): UserConnection
}

extend type Mutation {
    addUser(input: CreateUserInput!): UserMutationResponse!
    updateUser(input: UpdateUserInput!): UserMutationResponse!
}

type UserConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [UserEdge]
}

type UserEdge {
    node: User
    cursor: Cursor!
}